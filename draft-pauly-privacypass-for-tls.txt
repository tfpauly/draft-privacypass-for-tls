



Privacy Pass                                                    T. Pauly
Internet-Draft                                                     Apple
Intended status: Informational                            S. Hendrickson
Expires: 7 August 2025                                            Google
                                                         3 February 2025


            Including Privacy Pass Tokens in TLS Handshakes
                 draft-pauly-privacypass-for-tls-latest

Abstract

   This document defines a mechanism for TLS servers to request, and TLS
   clients to provide, Privacy Pass tokens as part of the Encrypted
   Client Hello in the TLS handshake.  This creates a way to add support
   for anonymous attestation and rate-limiting to servers that are
   enforcing denial-of-service protections as part of processing TLS
   handshakes.

About This Document

   This note is to be removed before publishing as an RFC.

   Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-pauly-privacypass-for-tls/.

   Discussion of this document takes place on the Privacy Pass mailing
   list (mailto:privacy-pass@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/browse/privacy-pass/.  Subscribe at
   https://www.ietf.org/mailman/listinfo/privacy-pass/.

   Source for this draft and an issue tracker can be found at
   https://github.com/tfpauly/draft-privacypass-for-tls.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 7 August 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Requesting Privacy Pass Tokens
   4.  Presenting Privacy Pass Tokens in Encrypted Client Hello
   5.  Security Considerations
   6.  IANA Considerations
     6.1.  Update of the TLS ExtensionType Registry
   7.  References
     7.1.  Normative References
     7.2.  Informative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   Privacy Pass Tokens [PPARCH] are cryptographic authentication
   messages that can be used to verify properties of a network entity,
   such as proving that a client passed some attestation check, without
   being linkable to other tokens or revealing identities.

   [PPAUTH] defines how Privacy Pass Tokens can be requested by HTTP
   servers (via an authentication challenge) and provided by HTTP
   clients.  This is useful for providing privacy-preserving
   authentication or attestation in HTTP workflows.  However, Privacy
   Pass Tokens can also be used in other contexts and protocols.  For
   example, [I-D.sawant-eap-ppt] defines how to include tokens in EAP
   (Extensible Authentication Protocol) exchanges.

   Some server deployments enforce rate-limiting on TLS [TLS13]
   handshakes to prevent denial-of-service (DoS) attacks, particularly
   by rate limiting the number of connections allowed from individual
   client IP addresses or IP address subnets.  This is common in
   scenarios where the cost of handling a terminated TLS connection is
   significantly higher than handling the initial handshake, like in L7
   loadbalancers with heavy-weight protocool conversions after
   termination.

   This enforcement can particularly impact cases where many clients are
   using a particular IP subnet due to using a privacy-preserving proxy
   (some examples are described in [PRIVACYPARTITIONING]).  For such
   cases, even if clients are able to provide Privacy Pass Tokens or
   similar proofs at the HTTP layer, their connections might be denied
   or rate-limiting during TLS session establishment.

   In order to signal that clients meet certain criteria (rate-limiting,
   etc), without disclosing individual client identities or pseudonyms,
   this document defines a way to include Privacy Pass Tokens within the
   TLS handshake.  Specifically, these tokens are sent within the TLS
   Encrypted Client Hello [ECH].  This prevents network observers from
   being able to directly observe the tokens, while still allowing the
   TLS server to observe the token early in the handshake.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Requesting Privacy Pass Tokens

   Servers may require that the Excrypted Client Hello contains the
   privacy_pass_challenge.  If the privacypass deployment requires
   context to sign over, servers should implement a Hello Retry Request
   [RFC8446], Section 4.1.4 that includes a privacy_pass_challenge.

   If a client does not include the token in the Client Hello (or
   subsequent Client Hello after being challenged), the server may
   reject the requst.

   Section Should Cover

   *  (done) Clients won't always include tokens

   *  (done) Servers send challenges in HRR, similar to cookie

      -  Needs example

   *  Should have a context to sign over

      -  Needs example

4.  Presenting Privacy Pass Tokens in Encrypted Client Hello

   Clients will convert the privacy_pass_challenge (possibly from
   handling the Hello Retry request) into a privacy_pass_token as
   described in [RFC9577], Section 2.1.3.  Clients will provide the now
   finalized privacy_pass_token to the server in the client hello.
   Clients MUST use [ECH] to pass privacy pass tokens.  If ECH is not
   supported, clients or deployments should not use Privacy Pass tokens
   in TLS due to potentially adding more tracking entropy visible on the
   wire.

   TODO

   *  (done) Clients include the token inside encrypted client hello

   *  (done) If no ECH, no use of privacy pass

5.  Security Considerations

   TODO Security

   *  Preventing replay attacks

   *  Privacy/timing attacks

6.  IANA Considerations

6.1.  Update of the TLS ExtensionType Registry

   IANA is requested to create the following entries in the existing
   registry for ExtensionType (defined in [TLS13]):

   1.  privacy_pass_challenge(0xfd00), with the "TLS 1.3" column values
       set to "HRR", "DTLS-Only" column set to "N", "Recommended" column
       set to "Yes".

   2.  privacy_pass_token(TBD), with "TLS 1.3" column values set to
       "CH", "DTLS-Only" column set to "N", and "Recommended" column set
       to "Yes", and the "Comment" column set to "Only appears in inner
       CH."

7.  References

7.1.  Normative References

   [ECH]      Rescorla, E., Oku, K., Sullivan, N., and C. A. Wood, "TLS
              Encrypted Client Hello", Work in Progress, Internet-Draft,
              draft-ietf-tls-esni-22, 15 September 2024,
              <https://datatracker.ietf.org/doc/html/draft-ietf-tls-
              esni-22>.

   [PPARCH]   Davidson, A., Iyengar, J., and C. A. Wood, "The Privacy
              Pass Architecture", RFC 9576, DOI 10.17487/RFC9576, June
              2024, <https://www.rfc-editor.org/rfc/rfc9576>.

   [PPAUTH]   Davidson, A., Iyengar, J., and C. A. Wood, "The Privacy
              Pass Architecture", RFC 9576, DOI 10.17487/RFC9576, June
              2024, <https://www.rfc-editor.org/rfc/rfc9576>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/rfc/rfc8446>.

   [RFC9577]  Pauly, T., Valdez, S., and C. A. Wood, "The Privacy Pass
              HTTP Authentication Scheme", RFC 9577,
              DOI 10.17487/RFC9577, June 2024,
              <https://www.rfc-editor.org/rfc/rfc9577>.

   [TLS13]    Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/rfc/rfc8446>.

7.2.  Informative References

   [I-D.sawant-eap-ppt]
              Sawant, P. and B. Brinckman, "Extensible Authentication
              Protocol (EAP) Using Privacy Pass Token", Work in
              Progress, Internet-Draft, draft-sawant-eap-ppt-01, 20
              October 2024, <https://datatracker.ietf.org/doc/html/
              draft-sawant-eap-ppt-01>.

   [PRIVACYPARTITIONING]
              Kühlewind, M., Pauly, T., and C. A. Wood, "Partitioning as
              an Architecture for Privacy", RFC 9614,
              DOI 10.17487/RFC9614, July 2024,
              <https://www.rfc-editor.org/rfc/rfc9614>.

Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Tommy Pauly
   Apple
   Email: tpauly@apple.com


   Scott Hendrickson
   Google
   Email: scott@shendrickson.com
